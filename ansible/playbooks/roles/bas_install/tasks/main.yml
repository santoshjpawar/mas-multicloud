---

# 1. Check for required facts
# -----------------------------------------------------------------------------
- name: "Fail if bas_password has not been provided"
  when: bas_password is not defined or bas_password == ""
  fail:
    msg: "bas_password property has not been set"

- name: "Fail if grafana_password has not been provided"
  when: grafana_password is not defined or grafana_password == ""
  fail:
    msg: "grafana_password property has not been set"


# 2. Provide Debug information
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "BAS Namespace ...................... {{ bas_namespace }}"
      - "BAS Persistent Storage Class........ {{bas_persistent_storage}}"
      - "BAS Metadata Storage Class ......... {{bas_meta_storage_class}}"


# 3. Create BAS project
# -----------------------------------------------------------------------------
- name: "Create namespace"
  community.kubernetes.k8s:
    api_version: v1
    kind: Namespace
    name: '{{ bas_namespace }}'


# 4. Deploy BAS subscription and Operator Group
# -----------------------------------------------------------------------------
- name: "Create operator group"
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'templates/operator-group.yaml') }}"
    wait: yes
    wait_timeout: 60 #subsequent tasks will fail if the CRD isn't fully created

- name: "Create subscription"
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'templates/subscription.yaml') }}"
    wait: yes
    wait_timeout: 300
    wait_condition:
      type: 'CatalogSourcesUnhealthy'
      status: "False"

- name: "Wait until the FullDeployment CRD is available"
  community.kubernetes.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "fulldeployments.bas.ibm.com"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: bas_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - bas_crd_info.resources is defined
    - bas_crd_info.resources | length > 0


# 5. Create BAS User Secret
# -----------------------------------------------------------------------------
- name: Create BAS User Secret
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: database-credentials
        namespace: "{{ bas_namespace}}"
      stringData:
        db_username: "{{ bas_username }}"
        db_password: "{{ bas_password }}"


# 6. Create Graphana User Secret
# -----------------------------------------------------------------------------
- name: Create Graphana User Secret
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: grafana-credentials
        namespace: "{{ bas_namespace}}"
      stringData:
        grafana_username: "{{ grafana_username }}"
        grafana_password: "{{ grafana_password }}"


# 7. Create BAS Full Deployment
# -----------------------------------------------------------------------------
- name: "Create BAS FullDeployment"
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'templates/fulldeployment.yaml') }}"


# 8. Wait Full Deployment to be complete
# -----------------------------------------------------------------------------
- name: "Wait for FullDeployment to be ready (60s delay)"
  community.kubernetes.k8s_info:
    api_version: bas.ibm.com/v1
    name: fulldeployment
    namespace: "{{bas_namespace}}"
    kind: FullDeployment
  register: bas_cr_result
  until:
    - bas_cr_result.resources is defined and bas_cr_result.resources | length == 1
    - bas_cr_result.resources[0].status is defined
    - bas_cr_result.resources[0].status.phase is defined
    - bas_cr_result.resources[0].status.phase == 'Ready'
  retries: 60 # approx 30 minutes before we give up
  delay: 60 # 1 minute

- name: "Create BAS Generate Key"
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'templates/generateKey.yaml') }}"


# 9. Wait Full Deployment to be complete
# -----------------------------------------------------------------------------
- name: "Wait for GenerateKey to be ready (60s delay)"
  community.kubernetes.k8s_info:
    api_version: bas.ibm.com/v1
    name: bas-api-key
    namespace: "{{bas_namespace}}"
    kind: GenerateKey
  register: bas_gk_result
  until:
    - bas_gk_result.resources is defined and bas_gk_result.resources | length == 1
    - bas_gk_result.resources[0].status is defined
    - bas_gk_result.resources[0].status.phase is defined
    - bas_gk_result.resources[0].status.phase == 'Ready'
  retries: 30 # approx 30 minutes before we give up
  delay: 60 # 1 minute


# 10. MAS Config
# -----------------------------------------------------------------------------
- include_tasks: tasks/bascfg.yml
  when: mas_instance_id is defined
