---

# 1. Check for undefined properties that do not have a default
# -----------------------------------------------------------------------------
- name: "Fail if mas_instance_id is not provided"
  when: mas_instance_id is not defined or mas_instance_id == ""
  fail:
    msg: "mas_instance_id property is required"


# 2. Set up the domain name for MAS
# -----------------------------------------------------------------------------
- name: "Get cluster subdomain"
  community.kubernetes.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

- name: "Configure domain"
  set_fact:
    mas_domain: "{{ (custom_domain != '') | ternary (custom_domain, mas_instance_id ~ '.' ~ _cluster_subdomain.resources[0].spec.domain) }}"


# 3. Provide debug information
# -----------------------------------------------------------------------------
- name: "Configure namespace"
  set_fact:
    mas_namespace: "mas-{{ mas_instance_id }}-core"

- name: "Debug information"
  debug:
    msg:
      - "Catalog source ............... {{ mas_catalog_source }}"
      - "MAS channel .................. {{ mas_channel }}"
      - "Instance ID .................. {{ mas_instance_id }}"
      - "MAS namespace ................ {{ mas_namespace }}"
      - "MAS domain ................... {{ mas_domain }}"
      - "MAS ICR cp content ........... {{ mas_icr_cp }}"
      - "MAS ICR cpopen content ....... {{ mas_icr_cpopen }}"
      - "MAS Custom Cluster Issue ..... {{ custom_cluster_issuer }}"


# 4. Install development (pre-release) catalogs for airgap installation
# This has to be done after the airgap setup disables network access to the
# publicly available catalogs.
# -----------------------------------------------------------------------------
- name: "Install airgap catalogs"
  when:
    - mas_catalog_source != "ibm-operator-catalog"
    - airgap_install is defined
    - airgap_install == true
  include_tasks: "tasks/airgap-catalogs.yml"


# 5. Install the operator
# -----------------------------------------------------------------------------
- name: "Install MAS Operator"
  include_role:
    name: install_operator
  vars:
    namespace: "{{ mas_namespace }}"
    catalog_source: "{{ mas_catalog_source }}"
    operator_group: "{{ lookup('template', 'templates/operator-group.yml.j2') }}"
    subscription: "{{ lookup('template', 'templates/subscription.yml.j2') }}"


# 6. Wait until the Suite CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the Suite CRD is available"
  community.kubernetes.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "suites.core.mas.ibm.com"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: suite_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - suite_crd_info.resources is defined
    - suite_crd_info.resources | length > 0


# 7. Create the ibm-entitlement secret for entitled content
# -----------------------------------------------------------------------------
- name: "init : Create ibm-entitlement secret in MAS Namespace"
  vars:
    entitledAuthStr: "{{mas_entitlement_username}}:{{mas_entitlement_key}}"
    entitledAuth: "{{ entitledAuthStr | b64encode }}"
    content:
      - '{"auths":{"{{mas_icr_cp}}": {"username":"{{mas_entitlement_username}}","password":"{{mas_entitlement_key}}","auth":"{{entitledAuth}}"}'
      - '}'
      - '}'
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: "ibm-entitlement"
        namespace: "{{ mas_namespace}}"
      stringData:
        # Only way I could get three consecutive "}" into a string :)
        .dockerconfigjson: "{{ content | join('') | string }}"

- name: "Configure CR template"
  vars:
    suite_cr: "{{ lookup('template', 'templates/core_v1_suite.yml.j2') }}"
    certificate_block: "{{ lookup('template', 'templates/certificate.yml.j2') }}"
  set_fact:
    cr_definition: "{{ (custom_cluster_issuer != '') | ternary (suite_cr + certificate_block, suite_cr) }}"


# 8. Suite installation
# -----------------------------------------------------------------------------
- name: Create suite.ibm.com/v1 CR
  community.kubernetes.k8s:
    state: present
    namespace: "{{ mas_namespace }}"
    definition: "{{ cr_definition }}"
