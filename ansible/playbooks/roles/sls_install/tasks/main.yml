---

# 1. Check for missing properties that do not have defaults
# -----------------------------------------------------------------------------
- name: "Fail if sls_entitlement_username has not been provided"
  when: sls_entitlement_username is not defined or sls_entitlement_username == ""
  fail:
    msg: "sls_entitlement_username property has not been set"

- name: "Fail if sls_entitlement_key has not been provided"
  when: sls_entitlement_key is not defined or sls_entitlement_key == ""
  fail:
    msg: "sls_entitlement_key property has not been set"

- name: "Fail if no MongoDb config is provided"
  when: mongodb is not defined and mongodb_cfg_file is not defined
  fail:
    msg: "mongodb_cfg_file property has not been set"

- name: "Fail if missing any mongodb information"
  when:
    - mongodb is defined
    - mongodb.hosts is not defined or mongodb.username is not defined or mongodb.password is not defined
  fail:
    msg: "Review provided MongoDb details, it could be missing hosts, username or password"


# 2. Provide debug information
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Catalog Source ................ {{ sls_catalog_source }}"
      - "SLS channel ................... {{ sls_channel }}"
      - "SLS namespace ................. {{ sls_namespace }}"
      - "SLS ICR cp content ............ {{ sls_icr_cp }}"
      - "SLS ICR cpopen content ........ {{ sls_icr_cpopen }}"
      - "SLS Storage class ............. {{ sls_storage_class }}"
      - "SLS Instance Name ............. {{ sls_instance_name }}"

- name: "Create SLS Namespace"
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{sls_namespace}}"

# 2. Set up the domain name for MAS
# -----------------------------------------------------------------------------
- name: "Get cluster subdomain"
  community.kubernetes.k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  register: _cluster_subdomain

- name: "Configure default domain if not set"
  when: not sls_domain
  set_fact:
    sls_domain: "{{ sls_namespace }}.{{ _cluster_subdomain.resources[0].spec.domain }}"


# 3. Create ibm-entitlement for SLS
# -----------------------------------------------------------------------------
- name: "Create ibm-entitlement secret in SLS Namespace"
  vars:
    entitledAuthStr: "{{sls_entitlement_username}}:{{sls_entitlement_key}}"
    entitledAuth: "{{ entitledAuthStr | b64encode }}"
    content:
      - '{"auths":{"{{sls_icr_cp}}": {"username":"{{sls_entitlement_username}}","password":"{{sls_entitlement_key}}","auth":"{{entitledAuth}}"}'
      - '}'
      - '}'
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      type: kubernetes.io/dockerconfigjson
      metadata:
        name: "ibm-entitlement"
        namespace: "{{ sls_namespace}}"
      stringData:
        # Only way I could get three consecutive "}" into a string :)
        .dockerconfigjson: "{{ content | join('') | string }}"


# 4. Install Operator
# -----------------------------------------------------------------------------
- name: "Install SLS Operator"
  include_role:
    name: install_operator
  vars:
    namespace: "{{ sls_namespace }}"
    catalog_source: "{{ sls_catalog_source }}"
    operator_group: "{{ lookup('template', 'templates/operator-group.yml.j2') }}"
    subscription: "{{ lookup('template', 'templates/subscription.yml.j2') }}"


# 5. Wait until the LicenseService CRD is available
# -----------------------------------------------------------------------------
- name: "Wait until the LicenseService CRD is available"
  community.kubernetes.k8s_info:
    api_version: apiextensions.k8s.io/v1
    name: "licenseservices.sls.ibm.com"
    kind: CustomResourceDefinition
    wait: yes
    wait_sleep: 10
    wait_timeout: 300 # 5 mins until we give up waiting for the CRD to get into the expected state
    wait_condition:
      type: NamesAccepted
      status: "True"
  register: sls_crd_info
  retries: 120 # ~approx 5 minutes before we give up waiting for the CRD to be created
  delay: 5 # seconds
  until:
    - sls_crd_info.resources is defined
    - sls_crd_info.resources | length > 0


# 5. Create Mongo Secret
# -----------------------------------------------------------------------------
- name: Read MongoDb config file
  set_fact:
    mongocfg: "{{ lookup('file', mongodb_cfg_file) | from_yaml_all  }}"
  when: mongodb_cfg_file is defined

- name: Overide MongoDb facts bases on mongocfg
  set_fact:
    mongodb:
      username: "{{mongocfg[0].stringData.username}}"
      password: "{{mongocfg[0].stringData.password}}"
      hosts: "{{mongocfg[1].spec.config.hosts}}"
  when: mongocfg is defined

- name: Create the Mongo Secret for SLS
  community.kubernetes.k8s:
    state: present
    namespace: '{{ sls_namespace }}'
    template: templates/mongo-secret.yml.j2


# 6. Bootstrap the license service
# -----------------------------------------------------------------------------
- include_tasks: tasks/bootstrap.yml
  when: bootstrap is defined


# 7. Create the license service CR
# -----------------------------------------------------------------------------
- name: Create the sls.ibm.com/v1.LicenseService
  community.kubernetes.k8s:
    state: present
    namespace: '{{ sls_namespace }}'
    template: templates/service.yml.j2
  register: sls_cr_result


# 8. Wait for it to hit Ready
# -----------------------------------------------------------------------------
- include_tasks: "tasks/sls-verify.yml"

# Adding some delay to get SLS LicenseService ready 
- name: Pause for 5 minutes 
  pause: 
    minutes: 5

# 9. Generate SLSCfg for MAS
# -----------------------------------------------------------------------------
- include_tasks: tasks/slscfg.yml
  when:
    - mas_instance_id is defined
    - mas_instance_id != ""
    - mas_config_dir is defined
    - mas_config_dir != ""

# 10. Create Cloud CredentialsRequest in SLS namespace

- name: Create CredentialsRequest in SLS namespace
  community.kubernetes.k8s:
    state: present
    template: templates/credential-request.yml.j2